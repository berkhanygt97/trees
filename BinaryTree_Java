
 public class TreeNode {
      int val;
      TreeNode left;
     TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
          this.val = val;
          this.left = left;
          this.right = right;
      }
  }
 


class Solution {
        public int deepestLeaf(TreeNode root,int currentDepth){
      
        int leftDepth=0;
          int rightDepth=0;
          
          if (root==null){
              return  currentDepth-1;
          
          }
          
            leftDepth=deepestLeaf(root.left, currentDepth+1);
            rightDepth=deepestLeaf(root.right, currentDepth+1);
      
      
          
          if(leftDepth>=rightDepth){return  leftDepth;}
          else{return rightDepth;}
      
      
      
      
      
      
      }
      public int deepestLeavesSumm(TreeNode root,int currentDepth,int maxDepth){
           int sum=0;
           if (root==null){return 0;}
          if (currentDepth==maxDepth){
              sum+=root.val;
              
             
          }
          
          else {              
              sum += deepestLeavesSumm(root.left, currentDepth+1, maxDepth);                                
              sum += deepestLeavesSumm(root.right, currentDepth+1, maxDepth);
          
          
      
      }
      
      
          return  sum;
      }
   
}
